%{
ECE 592 Project 1

Kudiyar (Cody) Orazymbetov
korazym@ncsu.edu

Nico Casale
ncasale@ncsu.edu

This file is used to compare the built-in kmeans function and 
the function generated by Cody and Nico for project 1.
%}


clear; close all;
addpath('../utility', '..');
global seed
seed = 475859;
rng(seed);
global imagesFolder
imagesFolder = '../../images';
addpath(imagesFolder);
overwriteImage = 0;

fprintf('ECE 592 Project 1\n');
fprintf(strcat(datestr(now),'\n'));

% read image
sz = 400;
I = double(rgb2gray(imcrop(imread('cassava.jpg'),[50 50 sz-1 sz-1])));
[M, N] = size(I);
%image(I) properties
%whos I
f = figure(1);
I3 = cat(3, I, I, I);
image(uint8(I3));
prettyAxes();
prettyPictureFig(f); prettyPictureFig(f);

P = 2; % square patch dimension

% partition into patches
Ipartitioned = im2col(I, [P P], 'distinct');

%% MATLAB's kmeans
% apply k-nearest neighbor
K = 16;
tic;
[idx, Cn] = kmeans(Ipartitioned', K);
toc;

% recreate image with the clusters learned by kmeans
indexrepresentations = zeros(length(idx), P^2);
for i = 1:length(idx)
   indexrepresentations(i, :) = Cn(idx(i), :);
end

Iquantized = col2im(indexrepresentations', [P P], size(I), 'distinct');

f = figure(2);
quantizedI3 = cat(3, Iquantized, Iquantized, Iquantized);
image(uint8(quantizedI3));
prettyAxes();
prettyPictureFig(f);prettyPictureFig(f);


%% Nico and Cody's kmeans 
profile on
tic
[idx_alt, Cn_alt] = kmeans_alt(Ipartitioned', K);
toc
profile viewer

indexrepresentations_alt = zeros(length(idx_alt), P^2);
for i = 1:length(idx_alt)
   indexrepresentations_alt(i, :) = Cn_alt(idx_alt(i), :);
end

Iquantized_alt = col2im(indexrepresentations_alt', [P P], size(I), 'distinct');

f = figure(3);
quantizedI3_alt = cat(3, Iquantized_alt, Iquantized_alt, Iquantized_alt);
image(uint8(quantizedI3_alt));
prettyAxes();
prettyPictureFig(f);prettyPictureFig(f);

compare = [Cn Cn_alt];

D_kmeans = sum(sum((I(:,:,1) - quantizedI3(:,:,1)) .^2)/(M*N))
D_kmeans_alt = sum(sum((I(:,:,1) - quantizedI3_alt(:,:,1)) .^2)/(M*N))

%% Get an average time and distortion for each
REPS = 20;
tMin = inf;
tic;
for rep = 1:REPS
   fprintf('rep = %d\n', rep);
   rng shuffle
   tSt = tic;
   [idx, Cn] = kmeans(Ipartitioned', K);
   tElapsed = toc(tSt);
   tMin = min(tElapsed, tMin);

   D_kmeans(rep) = sum(sum((I(:,:,1) - quantizedI3(:,:,1)) .^2)/(M*N));
   
end
tAvg = toc/REPS;
fprintf('MATLAB: min = %d, avg = %d\n', tMin, tAvg);

REPS = 20;
tMin_alt = inf;
tic;
for rep = 1:REPS
   fprintf('rep = %d\n', rep);
   rng shuffle
   tSt = tic;
   [idx_alt, Cn_alt] = kmeans_alt(Ipartitioned', K);
   tElapsed_alt = toc(tSt);
   tMin_alt = min(tElapsed_alt, tMin_alt);
   
   D_kmeans_alt(rep) = sum(sum((I(:,:,1) - quantizedI3_alt(:,:,1)) .^2)/(M*N));
   
end
tAvg_alt = toc/REPS;
fprintf('592: min = %d, avg = %d\n', tMin_alt, tAvg_alt);

D_kmeans_avg = mean(D_kmeans);
D_kmeans_avg_alt = mean(D_kmeans_alt);
fprintf('Distortion - MATLAB = %d, 592 = %d\n', D_kmeans_avg, D_kmeans_avg_alt);

%% save images
file = sprintf('altkmeans_reconstructed');
file = strcat(imagesFolder, file);
print(file, '-dpng');